/**
 * Maps the passed parameters to a Ditto Protocol message.
 * @param {Object.<string, string>} headers - The headers Object containing all received header values
 * @param {string} [textPayload] - The String to be mapped
 * @param {ArrayBuffer} [bytePayload] - The bytes to be mapped as ArrayBuffer
 * @param {string} [contentType] - The received Content-Type, e.g. "application/json"
 * @returns {(DittoProtocolMessage|Array<DittoProtocolMessage>)} dittoProtocolMessage(s) -
 *  The mapped Ditto Protocol message,
 *  an array of Ditto Protocol messages or
 *  <code>null</code> if the message could/should not be mapped
 */
function mapToDittoProtocolMsg(
    headers,
    textPayload,
    bytePayload,
    contentType
) {
    const payload = JSON.parse(Ditto.arrayBufferToString(bytePayload));

    let value = {};
    for (let key in payload) {
        if (key === "sensor_info") {
            continue;
        }
        value[key] = {
            "properties": {
                "value": payload[key]
            }
        }
    }

    return Ditto.buildDittoProtocolMsg(
        "$THING_NAMESPACE",
        payload.sensor_info.safe_location_id,
        'things',
        'twin',
        'commands', // create a command to update the twin
        'modify', // modify the twin
        '/features', // modify all features at once
        headers,
        value
    );
}
